<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEBLAEsAAD/4QCyRXhpZgAATU0AKgAAAAgABAEOAAIAAABNAAAAPgEaAAUAAAAB
        AAAAjAEbAAUAAAABAAAAlIKYAAIAAAAOAAAAnAAAAABtYWxlIHByb2ZpbGUgaWNvbiwgaXNvbGF0ZWQs
        IHdoaXRlIG9uIHRoZSBibHVlIGJhY2tncm91bmQuIEV4Y2x1c2l2ZSBTeW1ib2xzAAAAAAEsAAAAAQAA
        ASwAAAABcmFzaGFkYXNodXJvdgD/2wBDAAoHBwgHBgoICAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEm
        KzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7
        Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wgARCAJkAmQDAREAAhEBAxEB/8QA
        GgABAAIDAQAAAAAAAAAAAAAAAAUGAgMEAf/EABkBAQADAQEAAAAAAAAAAAAAAAABAwQCBf/aAAwDAQAC
        EAMQAAABz2+cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/8QAJhAAAQQCAQMEAwEAAAAA
        AAAAAwABAgQUUDAREjMTMUBgICEjoP/aAAgBAQABBQL/ADtN1d2rGdYRlgmT0zMpCJD6MMcyuOlCKZmi
        34kAMiLTnD6HXruZ4xaEeGxWYqdni+/CJzEZmi3HbB3x39QfYHlsD9I29hHvJzXo9R72m3WxzWG7q+9o
        +bmJ4t7R83MTxb2j5uYni3tHzcxPFva1f0m5nbqxwOCW7D5/gXvBu/ZRfujz35fveUp9wec8/UNvKxfS
        NzWS+kLfUy94+UxfWLvhE9IjP1bjul7YfQKRercUpNGJJuQn0CMnhIZGLDhum6v9Crn9GfBZP6MPob+z
        e353/f6HAciy4Lo5Tb6EEEjOMcRR4bFTvXs+/BUeaZmZuM1eJmIOQpbyMXnIFRh884RJE1WQt2GrMqGK
        Ao/BNTjNSjKD7YdchUKoMfxZwjNiUXZSi8H2Q6pCIdUY/kyhGbEoqUJDfXCqkKhVxi+a8WkxaLKUZQfV
        MzykGpEehnCJInrOHVUW/roiN3D1NBtJ06PqKLfx0Zm6G1FRulbR2m6WdQBugNHeb++ndN+m0d9v3qMs
        6yzrLOss6yzrLOss6yzrLOss6yzrLOss6yzrLOss6yzrLOss6yzrLOss6yzrLOss6yzrLOss6yzrLOss
        6yzrLOss6yzrLOpmmX/Qz//EACcRAAEDBAEEAgMBAQAAAAAAAAIAAQMREzFQMBIyQGAhQUJSoCBR/9oA
        CAEDAQE/Af522jL/AIrJKyStEnEm+vRhFywhhZsqlP8ARAJZRQu2PQ44+pM1McRx9Sx6AA9T0TNTklCr
        V9AiGg80g9Jb4Wq9OeZviu+h7ueRqi++hzzljfQ55yxvoc85Y30Oecsb6MOnwDDpfeB3N4M3bvWevgTv
        ht7C9R8A3qW9jLpLnkLpbfxFVqcxl1PXfiXS9eWYqNT0GEvx43eiJ+p6+gs9HqhLqavFMf4+hxn0vwyH
        0t6bP9eiMLl8NwzC7/LehgDkhFhajcUkVflvQQir8vynGxIhcc71md8IImb5fndmfKONx3YROSEWHHhH
        Ez4Ts7Z24xkSGJh8V2Z8oof1Ts7Z2YxE6GMR8l2Z8oof1Ts7Z14xkSGMR812qih/VOztnVs1UETDnQuz
        PlHH0/OqhzoyaraqD79Nh7dIfc+pi7NJL36kO1tJN3emz/Wpumrpq6aumrpq6aumrpq6aumrpq6aumrp
        q6aumrpq6aumrpq6aumrpq6aumrpq6aumrpq6aumrpq6aumrpq6aI3LP9DP/xAAlEQACAQMDBQEBAQEA
        AAAAAAABAgADERMwMVASIUBBYDJRoCD/2gAIAQIBAT8B/wA7fWsyrMqzIsDA/DEgbw1T6/7DERagO/wb
        v0wm+kj2+BZukatNrdvgKhudZDcc8TYX16R7256p+ddP1z1XbXG/PVdtcb89V21xvz1XbXG/PO9/AVur
        nG2Pg0v18bSHvnag7+AosOddbjXRbnn6i2N9ZV6Rz7C4tq0173+Bqr7094BYW+BPeEWNtKmvv4N16tFF
        6j8bS9/CEgdzo0yB8GzBYSTpJUt2PwLVLbaquVgIO3Ok2jVL7a4Norg82zgQknfwlqW3gN9uXLgRqhPi
        gkQVf7B35MuBC5Pkg2gq/wBgIO3Hs4EZyfOWr/YDfbi9o1QngQSNoj9XFVduDG/FVfXxtXfhF24mp+uE
        p/niW34Sl+fjaXvicazGsxrMazGsxrMazGsxrMazGsxrMazGsxrMazGsxrMazGsxrMazGsxrMazGsxrM
        azGsxrMazGsxrMazGsxrAoG3+hn/xAAxEAABAgMFBQgCAwEAAAAAAAABAAIRMqESITBQUSIxQWBxAxNA
        YXKBkbFSoCAzQoL/2gAIAQEABj8C/XagBHov6/lf4+VvZ8rcD0K2mEcjQYFt7RooAQH8tpt+qizaFeQ4
        m5n2rLRAYVoXP+1AiBHIFnhxUBcBid42YV5AjxdfjEcDeM+a3U47X6HPugjjv6Z87047umfO9OO7pnzv
        Tju6Z87047umfWnTGmPArVp3HPGR/LwPvnkRwQcOPgGM989s8W+Ac7huGe3yuuOOfyNwz+wd7cYu4cM/
        D/lRGJ3Y3u+uQe6PDdhlx3BF548ghzd4QcMLuh/1yHfId+DdMd3JvZ+/IllowWuaI2d/Id1zdVZaMK32
        dztNVA7+QLXaXN01UBcMTR2qsvGe2WiJVp+076x7LhEKI2m/WdxOy1QaPBWuz2TRQcIHN7hAalRmdqfC
        wcIhR7Ix8ioOEDmf4jzUYWjqfEwcIhR7I+xUHthl8ZW6lXCJ1PjYOEQo9kYeRUHCBysNaIkqLtp31kMH
        CIVoXs+sqcdBkbhqMqeemSQ0yk+bskf6spbkjspZ6ckHpymGSMPXKZ6Keinop6Keinop6Keinop6Kein
        op6Keinop6Keinop6Keinop6Keinop6Keinop6Keinop6Keinop6Keinotsxh+wz/8QAKxAAAQIEBAYD
        AAMBAAAAAAAAAQARITFhkTBBUFFgcaGxwfBAgdEgoPHh/9oACAEBAAE/If67QOkewOpeQFQCBsw5l+L/
        AEH4pF7zNSBt2cJ34Fik7kyCixnakjcWwA38ouGhAp0LS9R4DiqBM+CBAASAwg5Z3vJEMsCDwAAjCY9g
        hkbBgMSEkGNHADcYz3LLGbUa9HLmPLPHbCbR5H0a83nf8POO29n2jr3sVx+t9kJa77FcfrfZCWu+xXH6
        32QlrvsVx+t9kJa7GiHEZUY4DSCGKEQ/oBrjNkz4LGPNra45ITCcIMoA4+ByY5+POuxVNb6y+Ay2b6Br
        rQ5voNjjwkfVdS16KPnGKSAHJYBG5CGmvkDZSbhAERwQ4OIwk3acAn0sYuXDIiwHJWaogNhwCSpiOFKr
        OW2FEuAj+OA/8oq4PoPVRJclyZngOYpGB03hwJE2OZyCEBgM1DmCeXAeXhP8oNZDqcIBFnMyIQSAICYO
        XADYM5Wf8ICAASAxHpKkKgQHI5HXQQs2QTExk7Y4oCQ9v7ufNrbM7vmZ5KANucz8J4Y2c34n362rx5Om
        QXaOQ+Kx/WTwxe8U5ftHU48RXnsmv5IrR+0QhZH3mnqDrnp7AQ6x9KKfYx+abiEyIRHgJPv7R0vLwAJq
        b6PJoLM9ZR5O9npR6lbn/mh1XQhLSYW+Q9vohdbzaS0bc8aIw6jpPObnronObHppLBo7aIwbcO50iQoG
        Ay0T6sHbSAWIOyoLVQWqgtVBaqC1UFqoLVQWqgtVBaqC1UFqoLVQWqgtVBaqC1UFqoLVQWqgtVBaqC1U
        FqoLVQWqgtVBaqC1UFqoLVQWqgtVBaqC1UFqFAZoIN/YZ//aAAwDAQACAAMAAAAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADO0YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAELAAGwAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAADwAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHYAAAAALAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAgAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AGAAAAAAAyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFA
        AAAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAAAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAA
        AAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAHYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAA
        EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE4AAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAABAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAEoAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAG4AAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAA+AAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAHgAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAADAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAACYAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAA7AAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADvAAAAAEoAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAHQAAAAAABxAAAAAAAAAAAAAAAAAAAAAAAAAAAAeQAAAAAAAAKAAAAAAAAAAAAAAAAAAA
        AAAAAAADYAAAAAAAAAAjYAAAAAAAAAAAAAAAAAAAAAAAAdwAAAAAAAAAAAAeAAAAAAAAAAAAAAAAAAAA
        AADtAAAAAAAAAAAAAAaQAAAAAAAAAAAAAAAAAAAADYAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAo
        AAAAAAAAAAAAAAAAF4AAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAoAAA
        AAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAADoAAAAAA
        AAAAAAAAAAAQAAAAAAAAAAAAAAAAAAA7AAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAEIAAAAAAAAA
        AAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        vVZdXN9cduathweo4NWQ3bEssnTM9UMknOVAlYKgEi2Kzyavuoky3lq9Vx/CUSu1j/1dvqn/AE4xHUbk
        7c2UCVgqOmWUJkXv6zoE0LQLF9B7c/xVb5gLsxwcyutASQ+P5fdJATBie3UzOZKF7FRc+wrXa99xTYRb
        b5HIuP3n+SmTOq85NOnuYp4vHme9TCe6FnY3PjlygSsFW0BbDaMrz5gqHj/9JgePzb4DkoakJrqquzee
        Z8Vk34vzG5O3K3AKgMas1q0Utsmr65CgeMMD1G8cyrYQYV7Opnt5TYt/CORrOZ9kNOS9TlKGC+hF5IVq
        9PqxylH8QdgGjyRH/wC0zrym0BD7Tj1HJGTFkb6n7HlDYNSeQkpnCeSWA2ecn9HKApFqkFDdggeOSQHL
        0P2NeUIBehLJtK2DpW2dK2zpW2dK2zpW2dK2zpW2dK2zpW2dK2zpW2dK2zpW2dK2zpW2dK2zpW2dK2zp
        W2dK2zpW2dK2zpW2dK2zpW2dK2zpW2dK2zpW2dK2zpW2dK2zpW2dK2zpW2dKK+FYGD4P9hn/2Q==
</value>
  </data>
</root>